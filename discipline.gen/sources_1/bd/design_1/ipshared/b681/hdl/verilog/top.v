// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="top_top,hls_ip_2024_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu48dr-ffvg1517-2-e,HLS_INPUT_CLOCK=3.704000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.582000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=132,HLS_SYN_LUT=335,HLS_VERSION=2024_2}" *)

module top (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        to_test_TDATA,
        to_test_TVALID,
        to_test_TREADY
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [31:0] to_test_TDATA;
output   to_test_TVALID;
input   to_test_TREADY;

reg ap_done;
reg ap_idle;
reg ap_ready;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    to_test_TDATA_blk_n;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln18_fu_72_p2;
wire    ap_CS_fsm_state3;
reg   [0:0] icmp_ln18_reg_126;
reg   [63:0] first_data_fu_40;
wire   [63:0] first_data_2_fu_78_p2;
wire    regslice_both_to_test_U_apdone_blk;
reg    ap_block_state3;
reg    ap_block_state2;
reg   [63:0] counter_fu_44;
wire   [63:0] counter_1_fu_89_p2;
wire   [0:0] icmp_ln16_fu_105_p2;
reg   [2:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
reg    to_test_TVALID_int_regslice;
wire    to_test_TREADY_int_regslice;
wire    regslice_both_to_test_U_vld_out;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 first_data_fu_40 = 64'd0;
#0 counter_fu_44 = 64'd0;
end

top_regslice_both #(
    .DataWidth( 32 ))
regslice_both_to_test_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(32'd271000),
    .vld_in(to_test_TVALID_int_regslice),
    .ack_in(to_test_TREADY_int_regslice),
    .data_out(to_test_TDATA),
    .vld_out(regslice_both_to_test_U_vld_out),
    .ack_out(to_test_TREADY),
    .apdone_blk(regslice_both_to_test_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        counter_fu_44 <= 64'd0;
    end else if (((1'b0 == ap_block_state2) & (icmp_ln18_fu_72_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        counter_fu_44 <= counter_1_fu_89_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state2) & (icmp_ln18_fu_72_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        first_data_fu_40 <= first_data_2_fu_78_p2;
    end else if ((((1'b0 == ap_block_state3) & (icmp_ln18_reg_126 == 1'd1) & (1'b1 == ap_CS_fsm_state3)) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        first_data_fu_40 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        icmp_ln18_reg_126 <= icmp_ln18_fu_72_p2;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state2)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state3)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln16_fu_105_p2 == 1'd0) & (1'b0 == ap_block_state3) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln16_fu_105_p2 == 1'd0) & (1'b0 == ap_block_state3) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln18_reg_126 == 1'd1) & (1'b1 == ap_CS_fsm_state3)) | ((icmp_ln18_fu_72_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        to_test_TDATA_blk_n = to_test_TREADY_int_regslice;
    end else begin
        to_test_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2) & (icmp_ln18_fu_72_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        to_test_TVALID_int_regslice = 1'b1;
    end else begin
        to_test_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b0 == ap_block_state2) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln16_fu_105_p2 == 1'd0) & (1'b0 == ap_block_state3) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((icmp_ln16_fu_105_p2 == 1'd1) & (1'b0 == ap_block_state3) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_state2 = ((icmp_ln18_fu_72_p2 == 1'd1) & (to_test_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state3 = ((regslice_both_to_test_U_apdone_blk == 1'b1) | ((icmp_ln18_reg_126 == 1'd1) & (to_test_TREADY_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign counter_1_fu_89_p2 = (counter_fu_44 + 64'd1);

assign first_data_2_fu_78_p2 = (first_data_fu_40 + 64'd1);

assign icmp_ln16_fu_105_p2 = ((counter_fu_44 < 64'd10) ? 1'b1 : 1'b0);

assign icmp_ln18_fu_72_p2 = ((first_data_fu_40 == 64'd269999) ? 1'b1 : 1'b0);

assign to_test_TVALID = regslice_both_to_test_U_vld_out;


reg find_kernel_block = 0;
// synthesis translate_off
`include "top_hls_deadlock_kernel_monitor_top.vh"
// synthesis translate_on

endmodule //top

