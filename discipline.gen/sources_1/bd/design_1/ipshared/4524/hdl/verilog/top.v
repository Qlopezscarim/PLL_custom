// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="top_top,hls_ip_2024_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu48dr-ffvg1517-2-e,HLS_INPUT_CLOCK=3.704000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.122000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=302,HLS_SYN_LUT=395,HLS_VERSION=2024_2}" *)

module top (
        ap_clk,
        ap_rst_n,
        to_test_TDATA,
        to_test_TVALID,
        to_test_TREADY
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst_n;
output  [31:0] to_test_TDATA;
output   to_test_TVALID;
input   to_test_TREADY;

 reg    ap_rst_n_inv;
reg   [63:0] first_data;
wire    grp_top_Pipeline_VITIS_LOOP_14_1_fu_40_ap_start;
wire    grp_top_Pipeline_VITIS_LOOP_14_1_fu_40_ap_done;
wire    grp_top_Pipeline_VITIS_LOOP_14_1_fu_40_ap_idle;
wire    grp_top_Pipeline_VITIS_LOOP_14_1_fu_40_ap_ready;
wire   [31:0] grp_top_Pipeline_VITIS_LOOP_14_1_fu_40_to_test_TDATA;
wire    grp_top_Pipeline_VITIS_LOOP_14_1_fu_40_to_test_TVALID;
wire    grp_top_Pipeline_VITIS_LOOP_14_1_fu_40_to_test_TREADY;
wire   [0:0] grp_top_Pipeline_VITIS_LOOP_14_1_fu_40_first_data_flag_0_out;
wire    grp_top_Pipeline_VITIS_LOOP_14_1_fu_40_first_data_flag_0_out_ap_vld;
wire   [63:0] grp_top_Pipeline_VITIS_LOOP_14_1_fu_40_first_data_loc_0_out;
wire    grp_top_Pipeline_VITIS_LOOP_14_1_fu_40_first_data_loc_0_out_ap_vld;
reg    grp_top_Pipeline_VITIS_LOOP_14_1_fu_40_ap_start_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    ap_CS_fsm_state2;
reg   [31:0] to_test_TDATA_reg;
reg   [0:0] first_data_flag_0_loc_fu_36;
reg   [63:0] first_data_loc_0_loc_fu_32;
wire    ap_CS_fsm_state3;
wire    regslice_both_to_test_U_apdone_blk;
wire   [0:0] first_data_flag_0_loc_load_load_fu_56_p1;
reg   [2:0] ap_NS_fsm;
wire    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
reg   [31:0] to_test_TDATA_int_regslice;
wire    to_test_TREADY_int_regslice;
wire    regslice_both_to_test_U_vld_out;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 first_data = 64'd0;
#0 grp_top_Pipeline_VITIS_LOOP_14_1_fu_40_ap_start_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
end

top_top_Pipeline_VITIS_LOOP_14_1 grp_top_Pipeline_VITIS_LOOP_14_1_fu_40(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_top_Pipeline_VITIS_LOOP_14_1_fu_40_ap_start),
    .ap_done(grp_top_Pipeline_VITIS_LOOP_14_1_fu_40_ap_done),
    .ap_idle(grp_top_Pipeline_VITIS_LOOP_14_1_fu_40_ap_idle),
    .ap_ready(grp_top_Pipeline_VITIS_LOOP_14_1_fu_40_ap_ready),
    .first_data_load(first_data),
    .to_test_TDATA(grp_top_Pipeline_VITIS_LOOP_14_1_fu_40_to_test_TDATA),
    .to_test_TVALID(grp_top_Pipeline_VITIS_LOOP_14_1_fu_40_to_test_TVALID),
    .to_test_TREADY(grp_top_Pipeline_VITIS_LOOP_14_1_fu_40_to_test_TREADY),
    .first_data_flag_0_out(grp_top_Pipeline_VITIS_LOOP_14_1_fu_40_first_data_flag_0_out),
    .first_data_flag_0_out_ap_vld(grp_top_Pipeline_VITIS_LOOP_14_1_fu_40_first_data_flag_0_out_ap_vld),
    .first_data_loc_0_out(grp_top_Pipeline_VITIS_LOOP_14_1_fu_40_first_data_loc_0_out),
    .first_data_loc_0_out_ap_vld(grp_top_Pipeline_VITIS_LOOP_14_1_fu_40_first_data_loc_0_out_ap_vld)
);

top_regslice_both #(
    .DataWidth( 32 ))
regslice_both_to_test_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(to_test_TDATA_int_regslice),
    .vld_in(grp_top_Pipeline_VITIS_LOOP_14_1_fu_40_to_test_TVALID),
    .ack_in(to_test_TREADY_int_regslice),
    .data_out(to_test_TDATA),
    .vld_out(regslice_both_to_test_U_vld_out),
    .ack_out(to_test_TREADY),
    .apdone_blk(regslice_both_to_test_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_top_Pipeline_VITIS_LOOP_14_1_fu_40_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            grp_top_Pipeline_VITIS_LOOP_14_1_fu_40_ap_start_reg <= 1'b1;
        end else if ((grp_top_Pipeline_VITIS_LOOP_14_1_fu_40_ap_ready == 1'b1)) begin
            grp_top_Pipeline_VITIS_LOOP_14_1_fu_40_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((first_data_flag_0_loc_load_load_fu_56_p1 == 1'd1) & (regslice_both_to_test_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state3))) begin
        first_data <= first_data_loc_0_loc_fu_32;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_top_Pipeline_VITIS_LOOP_14_1_fu_40_first_data_flag_0_out_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        first_data_flag_0_loc_fu_36 <= grp_top_Pipeline_VITIS_LOOP_14_1_fu_40_first_data_flag_0_out;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_top_Pipeline_VITIS_LOOP_14_1_fu_40_first_data_loc_0_out_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        first_data_loc_0_loc_fu_32 <= grp_top_Pipeline_VITIS_LOOP_14_1_fu_40_first_data_loc_0_out;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_top_Pipeline_VITIS_LOOP_14_1_fu_40_to_test_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        to_test_TDATA_reg <= grp_top_Pipeline_VITIS_LOOP_14_1_fu_40_to_test_TDATA;
    end
end

assign ap_ST_fsm_state1_blk = 1'b0;

always @ (*) begin
    if ((grp_top_Pipeline_VITIS_LOOP_14_1_fu_40_ap_done == 1'b0)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

always @ (*) begin
    if ((regslice_both_to_test_U_apdone_blk == 1'b1)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if (((grp_top_Pipeline_VITIS_LOOP_14_1_fu_40_to_test_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        to_test_TDATA_int_regslice = grp_top_Pipeline_VITIS_LOOP_14_1_fu_40_to_test_TDATA;
    end else begin
        to_test_TDATA_int_regslice = to_test_TDATA_reg;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (grp_top_Pipeline_VITIS_LOOP_14_1_fu_40_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((regslice_both_to_test_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign first_data_flag_0_loc_load_load_fu_56_p1 = first_data_flag_0_loc_fu_36;

assign grp_top_Pipeline_VITIS_LOOP_14_1_fu_40_ap_start = grp_top_Pipeline_VITIS_LOOP_14_1_fu_40_ap_start_reg;

assign grp_top_Pipeline_VITIS_LOOP_14_1_fu_40_to_test_TREADY = (to_test_TREADY_int_regslice & ap_CS_fsm_state2);

assign to_test_TVALID = regslice_both_to_test_U_vld_out;


reg find_kernel_block = 0;
// synthesis translate_off
`include "top_hls_deadlock_kernel_monitor_top.vh"
// synthesis translate_on

endmodule //top

